package com.example.movie.serviceTest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.example.movie.entity.Movie;
import com.example.movie.repository.MovieRepository;
import com.example.movie.service.MovieService;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class MovieServiceTest {

    @Mock
    private MovieRepository movieRepository;

    @InjectMocks
    private MovieService movieService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllMovies() {
        // Arrange
        Movie movie1 = new Movie(1L, "Movie 1", "Description 1", "image1.jpg", null);
        Movie movie2 = new Movie(2L, "Movie 2", "Description 2", "Director 2", "image2.jpg", null);
        when(movieRepository.findAll()).thenReturn(Arrays.asList(movie1, movie2));

        // Act
        List<Movie> movies = movieService.getAllMovies();

        // Assert
        assertEquals(2, movies.size());
        verify(movieRepository, times(1)).findAll();
    }

    @Test
    public void testGetMovieById_MovieExists() {
        // Arrange
        Movie movie = new Movie(1L, "Movie 1", "Description 1", "Director 1", "image1.jpg", null);
        when(movieRepository.findById(1L)).thenReturn(Optional.of(movie));

        // Act
        Movie foundMovie = movieService.getMovieById(1L);

        // Assert
        assertNotNull(foundMovie);
        assertEquals("Movie 1", foundMovie.getTitle());
        verify(movieRepository, times(1)).findById(1L);
    }

    @Test
    public void testGetMovieById_MovieDoesNotExist() {
        // Arrange
        when(movieRepository.findById(1L)).thenReturn(Optional.empty());

        // Act
        Movie foundMovie = movieService.getMovieById(1L);

        // Assert
        assertNull(foundMovie);
        verify(movieRepository, times(1)).findById(1L);
    }
    
    // Additional tests can be added for createMovie, updateMovie, and deleteMovie
}
