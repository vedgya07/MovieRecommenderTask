package com.example.movie.serviceTest;

import com.example.movie.entity.Rating;
import com.example.movie.repository.RatingRepository;
import com.example.movie.service.RatingService;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class RatingServiceTest {

    @Mock
    private RatingRepository ratingRepository;

    @InjectMocks
    private RatingService ratingService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetRatingsByMovieId() {
        Long movieId = 1L;
        Rating rating1 = new Rating(1L, movieId, 2L, 5, 3);
        Rating rating2 = new Rating(2L, movieId, 3L, 4, 4);

        when(ratingRepository.findByMovieId(movieId)).thenReturn(List.of(rating1, rating2));

        List<Rating> result = ratingService.getRatingsByMovieId(movieId);
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.contains(rating1));
        assertTrue(result.contains(rating2));
    }

    @Test
    public void testAddRating() {
        Rating rating = new Rating(1L, 1L, 2L, 5, 3);

        when(ratingRepository.save(rating)).thenReturn(rating);

        Rating result = ratingService.addRating(rating);
        assertNotNull(result);
        assertEquals(rating.getId(), result.getId());
        assertEquals(rating.getMovieId(), result.getMovieId());
        assertEquals(rating.getUserId(), result.getUserId());
        assertEquals(rating.getScore(), result.getScore());
        assertEquals(rating.getNovelty(), result.getNovelty());
    }
    
    @Test
    public void testAddRating_Null() {
        when(ratingRepository.save(null)).thenThrow(new IllegalArgumentException("Rating cannot be null"));

        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {
            ratingService.addRating(null);
        });
        assertEquals("Rating cannot be null", thrown.getMessage());
    }
}